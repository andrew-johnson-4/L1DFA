import $"preludes/l1.tlc";

type DFA = {
   states: Boolean[],
   transitions: Map<(Whole,Char),Whole>,
};

export .accepts(d: DFA, s: String): Boolean = {
   let at = 0;
   for c in s {
      if (at,c) in d.transitions {
         at = d.transitions[(at,c)];
      } else {
         return False;
      }
   };
   d.states[at]
};

export .intersect(left: DFA, right: DFA): DFA = {
   let p = DFA {
      states: (for _ in range(left.states.length * right.states.length)
               yield False),
      transitions: map(),
   };
   for pi in range(p.states.length) {
      let li = pi / right.states.length;
      let ri = pi % right.states.length;
      if left.states[li] && right.states[ri] {
         p.states[pi] = True;
      }
   }
   for ((ls,lc),lt) in left.transitions {
   for ((rs,rc),rt) in right.transitions {
   if lc == rc {
      let ps = ls * right.states.length + rs;
      let pt = lt * right.states.length + rt;
      p.transitions[(ps,lc)] = pt;
   }}}
   p
}

export .complement(d: DFA): DFA {
   DFA {
      states: (for c in d.states yield not(c)),
      transitions: d.transitions,
   }
}

export .is_empty(d: DFA): Boolean {
   let reached = 0;
   let reach = set((0,));
   while reach.length > reached {
      reached = reach.length;
      for ((ls,_lc),lt) in self.transitions {
      if ls in reach {
         reach.insert(lt);
      }}
   }
   for ri in reach {
   if self.states[ri] {
      return False;
   }}
   True
}

export .is_subset_of(l: &DFA, r: &DFA): Boolean {
   l.intersect( r.complement() ).is_empty()
}
